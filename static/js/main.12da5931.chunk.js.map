{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","api/posts.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","posts","selectedPostId","onPostIdSelect","className","map","post","key","id","userId","title","type","onClick","BASE_URL","getPostComments","postId","fetch","then","response","json","result","data","comments","filter","comment","catch","error","removeComment","commentId","a","method","addComment","body","JSON","stringify","NewCommentForm","changeLoadingStatus","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","commentBody","setCommentBody","onSubmit","event","preventDefault","name","email","createNewComment","placeholder","value","onChange","target","required","Loader","getUserPosts","PostDetails","postDetails","setPostDetails","setComments","isLoading","areCommentsVisible","switchCommentsVisibility","useEffect","recievedPostDetails","recievedComments","preparePostDetails","length","App","setPosts","selectedUserId","onUserSelect","isPostsListLoading","changePostListLoadingStatus","recievedPosts","preparePosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12da5931.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport PropTypes, { shape } from 'prop-types';\n\nexport const PostsList = ({ posts, selectedPostId, onPostIdSelect }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts && posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>{`[User #${post.userId}]: `}</b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            onClick={() => onPostIdSelect(\n              post.id === selectedPostId ? null : post.id,\n            )}\n          >\n            {post.id === selectedPostId ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  onPostIdSelect: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL } from './api';\n\nexport const getPostComments = postId => fetch(`${BASE_URL}/comments`)\n  .then(response => response.json())\n  .then(result => result.data)\n  .then(comments => comments)\n  .then(comments => comments.filter(comment => comment.postId === postId))\n  .catch(error => `Oooops...${error}`);\n\nexport const removeComment = async(commentId) => {\n  await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = async(comment) => {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'Post',\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/comments';\n\nexport const NewCommentForm = ({\n  changeLoadingStatus,\n  selectedPostId,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n  const createNewComment = (event) => {\n    event.preventDefault();\n\n    const comment = {\n      postId: selectedPostId,\n      name: authorName,\n      email: authorEmail,\n      body: commentBody,\n    };\n\n    addComment(comment);\n    changeLoadingStatus(true);\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={event => createNewComment(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={authorName}\n          onChange={event => setAuthorName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={authorEmail}\n          onChange={event => setAuthorEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={event => setCommentBody(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  changeLoadingStatus: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { BASE_URL } from './api';\n\nexport const getUserPosts = userId => fetch(`${BASE_URL}/posts`)\n  .then(response => response.json())\n  .then(result => result.data)\n  .then(posts => (\n    userId === 0\n      ? posts\n      : posts.filter(post => post.userId === userId)\n  ))\n  .catch(error => `Oooops...${error}`);\n\nexport const getPostDetails = postId => fetch(`${BASE_URL}/posts/${postId}`)\n  .then(response => response.json())\n  .then(result => result.data)\n  .then(post => post)\n  .catch(error => `Oooops...${error}`);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostDetails.scss';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isLoading, changeLoadingStatus] = useState(false);\n  const [areCommentsVisible, switchCommentsVisibility] = useState(true);\n\n  useEffect(() => {\n    const preparePostDetails = async() => {\n      const recievedPostDetails = await getPostDetails(selectedPostId);\n      const recievedComments = await getPostComments(selectedPostId);\n\n      setPostDetails(recievedPostDetails);\n      setComments(recievedComments);\n      changeLoadingStatus(false);\n    };\n\n    preparePostDetails();\n  }, [selectedPostId, isLoading]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails.body}</p>\n      </section>\n\n      {\n      isLoading\n        ? <Loader />\n        : (\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => switchCommentsVisibility(!areCommentsVisible)}\n            >\n              {\n              `${areCommentsVisible ? 'Hide' : 'Show'} ${comments.length}\n              ${comments.length > 1 ? 'comments' : 'comment'}`\n              }\n            </button>\n\n            {areCommentsVisible && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li key={comment.id} className=\"PostDetails__list-item\">\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => {\n                        removeComment(comment.id);\n                        changeLoadingStatus(true);\n                      }}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </section>\n        )\n      }\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            changeLoadingStatus={changeLoadingStatus}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedUserId, onUserSelect] = useState(0);\n  const [isPostsListLoading, changePostListLoadingStatus] = useState(false);\n  const [selectedPostId, onPostIdSelect] = useState(null);\n\n  useEffect(() => {\n    const preparePosts = async() => {\n      changePostListLoadingStatus(true);\n      const recievedPosts = await getUserPosts(selectedUserId);\n\n      setPosts(recievedPosts);\n      changePostListLoadingStatus(false);\n    };\n\n    preparePosts();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={event => onUserSelect(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {\n            isPostsListLoading\n              ? <Loader />\n              : (\n                <PostsList\n                  posts={posts}\n                  selectedPostId={selectedPostId}\n                  onPostIdSelect={onPostIdSelect}\n                />\n              )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}