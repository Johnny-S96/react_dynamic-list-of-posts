{"version":3,"sources":["components/PostsList/PostsList.jsx","api/api.js","api/comments.js","components/NewCommentForm/NewCommentForm.jsx","components/Loader/Loader.jsx","api/posts.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","posts","selectedPostId","onPostIdSelect","changePostDetailsLoadingStatus","className","map","post","key","id","userId","title","type","onClick","BASE_URL","getData","url","fetch","then","response","ok","json","Error","result","data","getPostComments","postId","comments","filter","comment","catch","removeComment","commentId","a","method","addComment","body","JSON","stringify","NewCommentForm","changeLoadingStatus","useState","authorName","setAuthorName","authorEmail","setAuthorEmail","commentBody","setCommentBody","onSubmit","event","preventDefault","name","email","createNewComment","placeholder","value","onChange","target","required","Loader","getUserPosts","PostDetails","arePostDetailsLoading","postDetails","setPostDetails","setComments","isLoading","areCommentsVisible","switchCommentsVisibility","useEffect","recievedPostDetails","recievedComments","preparePostDetails","length","App","setPosts","selectedUserId","setSelectedUserId","isPostsListLoading","changePostListLoadingStatus","receivedPosts","preparePosts","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc2da98b.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport PropTypes, { shape } from 'prop-types';\n\nexport const PostsList = ({\n  posts,\n  selectedPostId,\n  onPostIdSelect,\n  changePostDetailsLoadingStatus,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts && posts.map(post => (\n        <li key={post.id} className=\"PostsList__item\">\n          <div>\n            <b>{`[User #${post.userId}]: `}</b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className=\"PostsList__button button\"\n            onClick={() => {\n              changePostDetailsLoadingStatus(true);\n              onPostIdSelect(\n                post.id === selectedPostId ? null : post.id,\n              );\n            }}\n          >\n            {post.id === selectedPostId ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  onPostIdSelect: PropTypes.func.isRequired,\n  changePostDetailsLoadingStatus: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getData = url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error('Error');\n  })\n  .then(result => result.data);\n","import { BASE_URL, getData } from './api';\n\nexport const getPostComments = postId => getData('/comments')\n  .then(comments => comments.filter(comment => comment.postId === postId))\n  .catch(() => []);\n\nexport const removeComment = async(commentId) => {\n  await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const addComment = async(comment) => {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'Post',\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/comments';\n\nexport const NewCommentForm = ({\n  changeLoadingStatus,\n  selectedPostId,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n  const createNewComment = (event) => {\n    event.preventDefault();\n\n    const comment = {\n      postId: selectedPostId,\n      name: authorName,\n      email: authorEmail,\n      body: commentBody,\n    };\n\n    addComment(comment);\n    changeLoadingStatus(true);\n    setAuthorName('');\n    setAuthorEmail('');\n    setCommentBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={event => createNewComment(event)}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={authorName}\n          onChange={event => setAuthorName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={authorEmail}\n          onChange={event => setAuthorEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={commentBody}\n          onChange={event => setCommentBody(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  changeLoadingStatus: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { getData } from './api';\n\nexport const getUserPosts = userId => getData('/posts')\n  .then(posts => (\n    userId === 0\n      ? posts\n      : posts.filter(post => post.userId === userId)\n  ))\n  .catch(() => []);\n\nexport const getPostDetails = postId => getData(`/posts/${postId}`)\n  .catch(() => null);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostDetails.scss';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { Loader } from '../Loader';\nimport { getPostComments, removeComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\n\nexport const PostDetails = ({\n  selectedPostId,\n  arePostDetailsLoading,\n  changePostDetailsLoadingStatus,\n}) => {\n  const [postDetails, setPostDetails] = useState({});\n  const [comments, setComments] = useState([]);\n  const [isLoading, changeLoadingStatus] = useState(false);\n  const [areCommentsVisible, switchCommentsVisibility] = useState(true);\n\n  useEffect(() => {\n    const preparePostDetails = async() => {\n      const recievedPostDetails = await getPostDetails(selectedPostId);\n      const recievedComments = await getPostComments(selectedPostId);\n\n      setPostDetails(recievedPostDetails);\n      setComments(recievedComments);\n      changeLoadingStatus(false);\n      changePostDetailsLoadingStatus(false);\n    };\n\n    preparePostDetails();\n  }, [selectedPostId, isLoading]);\n\n  return arePostDetailsLoading\n    ? <Loader />\n    : (\n      <div className=\"PostDetails\">\n        <h2>Post details:</h2>\n\n        <section className=\"PostDetails__post\">\n          <p>{postDetails.body}</p>\n        </section>\n\n        {\n        isLoading\n          ? <Loader />\n          : (\n            <section className=\"PostDetails__comments\">\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={() => switchCommentsVisibility(!areCommentsVisible)}\n              >\n                {\n                `${areCommentsVisible ? 'Hide' : 'Show'} ${comments.length}\n                ${comments.length > 1 ? 'comments' : 'comment'}`\n                }\n              </button>\n\n              {areCommentsVisible && (\n                <ul className=\"PostDetails__list\">\n                  {comments.map(comment => (\n                    <li key={comment.id} className=\"PostDetails__list-item\">\n                      <button\n                        type=\"button\"\n                        className=\"PostDetails__remove-button button\"\n                        onClick={() => {\n                          removeComment(comment.id);\n                          changeLoadingStatus(true);\n                        }}\n                      >\n                        X\n                      </button>\n                      <p>{comment.body}</p>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </section>\n          )\n        }\n\n        <section>\n          <div className=\"PostDetails__form-wrapper\">\n            <NewCommentForm\n              changeLoadingStatus={changeLoadingStatus}\n              selectedPostId={selectedPostId}\n            />\n          </div>\n        </section>\n      </div>\n    );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n  arePostDetailsLoading: PropTypes.bool.isRequired,\n  changePostDetailsLoadingStatus: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { Loader } from './components/Loader';\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [isPostsListLoading, changePostListLoadingStatus] = useState(false);\n  const [\n    arePostDetailsLoading,\n    changePostDetailsLoadingStatus,\n  ] = useState(false);\n  const [selectedPostId, onPostIdSelect] = useState(null);\n\n  useEffect(() => {\n    const preparePosts = async() => {\n      changePostListLoadingStatus(true);\n      const receivedPosts = await getUserPosts(selectedUserId);\n\n      setPosts(receivedPosts);\n      changePostListLoadingStatus(false);\n    };\n\n    preparePosts();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={event => setSelectedUserId(Number(event.target.value))}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {\n            isPostsListLoading\n              ? <Loader />\n              : (\n                <PostsList\n                  posts={posts}\n                  selectedPostId={selectedPostId}\n                  onPostIdSelect={onPostIdSelect}\n                  changePostDetailsLoadingStatus={\n                    changePostDetailsLoadingStatus\n                  }\n                />\n              )\n          }\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && (\n            <PostDetails\n              arePostDetailsLoading={arePostDetailsLoading}\n              changePostDetailsLoadingStatus={changePostDetailsLoadingStatus}\n              selectedPostId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}